@page "/"

@inject IChargeLogService _chargeService

<PageTitle>Dashboard</PageTitle>

<h1>Dashboard</h1>

@if (_tableRows.Count() == 0 )
{
    <p><em>Loading ...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th>Network Count</th>
                <th>Location Count</th>
                <th>Session Count</th>
                <th>kWh</th>
                <th>Duration</th>
                <th>Price</th>
                <th>Discount</th>
                <th>Total Amount</th>
            </tr>
        </thead>
        <tbody >
            @for(int idx = 0; idx < _tableRows.Count; idx++)
            {
               var idx1 = idx;

               @if (idx == 0)   // format totals 
               {
                    <tr @onclick="()=> ShowDetails(idx1)" class=@(_tableRows[idx].DisplayDetails ? "network-list-header" : "")>
                        <th scope="row">Totals</th>
                        <th scope="row">@_tableRows[idx].NetworkCount</th>
                        <th scope="row">@_tableRows[idx].LocationCount</th>
                        <th scope="row">@_tableRows[idx].SessionCount</th>
                        <th scope="row">@_tableRows[idx].KWh</th>
                        <th scope="row">@_tableRows[idx].Duration.ToString(_config.TimeSpanFormat)</th>
                        <th scope="row">@_tableRows[idx].Price.ToString("C")</th>
                        <th scope="row">@_tableRows[idx].Discount.ToString("C")</th>
                        <th scope="row">@((_tableRows[idx].Price - _tableRows[idx].Discount).ToString("C"))</th>
                    </tr>
               }
               else             // line 
               {
                    <tr @onclick="()=> ShowDetails(idx1)" class=@(_tableRows[idx].DisplayDetails ? "network-list-header" : "")>
                        <td scope="row">@_tableRows[idx].Title</td>
                        <td scope="row">@_tableRows[idx].NetworkCount</td>
                        <td scope="row">@_tableRows[idx].LocationCount</td>
                        <td scope="row">@_tableRows[idx].SessionCount</td>
                        <td scope="row">@_tableRows[idx].KWh</td>
                        <td scope="row">@_tableRows[idx].Duration.ToString(_config.TimeSpanFormat)</td>
                        <td scope="row">@_tableRows[idx].Price.ToString("C")</td>
                        <td scope="row">@_tableRows[idx].Discount.ToString("C")</td>
                        <td scope="row">@((_tableRows[idx].Price - _tableRows[idx].Discount).ToString("C"))</td>
                    </tr>                   
               }

                @if (_tableRows[idx].DisplayDetails)
                {
                    <tr>
                        <td colspan="9" class="td-body">
                            <NetworkList></NetworkList>
                        </td>
                    </tr>
                }
               
            }
        </tbody>
    </table>

    <button class="btn" @onclick="LoadMonths">Previous Month</button>
   
}

@code {
    private int _currentMonth = 0;
    private List<DashboardMainTableRow> _tableRows = new List<DashboardMainTableRow>();
    private InterfaceConfig _config = new InterfaceConfig();

    protected override async Task OnInitializedAsync()
    {
        var totalsRow =  await _chargeService.GetTotalsAsync();
        _config = _chargeService.GetConfig();

        _tableRows.Add(totalsRow);
        LoadMonths();

    }

    private void LoadMonths()
    {
        for(var idx = 0; idx < _config.MonthGroupSize; idx ++)
        {
            var monthRow = _chargeService.GetMonth(_currentMonth);    
            _tableRows.Add(monthRow);
            _currentMonth--;
        }       
    }

    private void ShowDetails(int idx)
    {
        _tableRows[idx].DisplayDetails = !_tableRows[idx].DisplayDetails;
    }
}